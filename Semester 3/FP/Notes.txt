0.1 Уводна лекция
Какво е ФП - плюсове / минуси

Типове езици според:
    типовата система
    странични ефекти
    стратегия за оценяване


1.1 Основни понятия в Scheme
Какъв тип е?
Литерал - дефиниция
define - дефиниция
Специални форми - дефиниция и примери                                                                             //define, if, case, cond, and, or, let, let*, lambda, delay
cond, case - как се ползват

1.2 Модел на средите и изчислителни процеси
Среда - дефиниция
рекурсивен процес - дефиниция
итеративен процес - дефиниция
опашкова рекурсия - дефиниция
let, let* - разлики относно средите

1.3 Функции от по-висок ред
Функции от по-висок ред - дефиниция
Обобщена функция за дясно натрупване
Обобщена функция за ляво натрупване
Анонимни функции
намиране на неподвижна точка-

1.4 Списъци
Наредени двойки - дефиниция
S-израз - дефиниция
Атом - дефиниция
Списък - дефиниция
Форми на равенство в Scheme
Вариадични функции - дефиниция

1.5 Структури от данни в Scheme
Матрица
Абстракция със структури от данни

1.6 Мутиращи операции
Мутиращи операции в Scheme

1.7 Потоци
Обещание
Поток
Генератори



2.1 Haskell
Какъв тип език е?
Частично прилагане на функции

2.2 Дефиниране на функции в Haskell
let
where
Образец - дефиниция и видове(3)

2.3 Кортежи и списъци
Потребителски типове
Именувани образци
Списъци
Образци на списъци
Случаи по образци
Генератори на списъци
Полиморфни функции
Класове от типове
Отделяне на списъци
λ-функции

2.4 Лениво оценяване и програмиране от по-висок ред
Стриктно и нестриктно оценяване
Теорема за нормализация
Потоци в Haskell

2.5 Типове и класове в Haskell
Видове полиморфизъм в Haskell(2)
Генеричните конструкции - типове (2)
Аd hoc полиморфизъм(3)
Клас от типове
Класови ограничения
Контекст
Екземпляр на клас
Наследяване / Разширяване
Потребителски дефинирани типове / алгебрични
Записи (с полета)
Параметризирани типове

2.6 Входно-изходни операции в Haskell
Поточна обработка