#lang racket

;general functions
(define (accumulate op nv a b term next)
  (if (> a b) nv (op (term a) (accumulate op nv (next a) b term next)))
  )
(define (foldr1 op l)
  (if (null? (cdr l)) (car l) (op (car l) (foldr1 op (cdr l))))
  )
(define (mapAndFold op op2 l)
  (if (null? (cdr l)) (op2 (car l)) (op (op2 (car l)) (mapAndFold op op2 (cdr l))))
  )
(define (betterOr a b)
  (if (equal? a #t) #t b)
  )
(define (betterAnd a b)
  (if (equal? a #f) #f b)
  )

(define (trim n)
  (define (divides a b)
    (if (= (remainder a b) 0) #t #f)
    )
  (define (isItProsto n)
    (not (accumulate betterOr #f 2 (- n 1) (lambda(x) (divides n x)) (lambda(x) (+ x 1))))
    )
  ( 
   define (dividesOnlyIfProsto x n)
    (if (and (isItProsto x) (divides n x)) (/ n x) n)
    )
  
  (accumulate dividesOnlyIfProsto n 2 n (lambda(x) x) (lambda(x) (+ x 1))) 
  )
;(trim 360)


(define (commonUnitary a b)
  (define (divides a b)
    (if (= (remainder a b) 0) #t #f)
    )
   (define (areThereCommonDivs a b) ;nqma znachenie dali proverkata e samo za prosti ili za vsichki
     (accumulate betterOr #f 2 (min a b) (lambda(x) (and (divides a x) (divides b x))) (lambda(x) (+ x 1)))
     )
  (define (isItUnitaryTo n x)
    (if (divides n x) (not (areThereCommonDivs (/ n x) x)) #f)
    )
  (define (areBothUnitary x)
    (if (and (isItUnitaryTo a x) (isItUnitaryTo b x)) 1 0)
    )

  (+ (accumulate + 0 2 (min a b) (lambda(x) (areBothUnitary x)) (lambda(x) (+ x 1))) 1)
  )
;(commonUnitary 7 5)


(define (selectiveMerge func a b)
  (define (doOperation lastOp a b)
    (if (< (func a b) (min a b)) (cons a 0)
        (if (> (func a b) (max a b)) (cons (func a b) 1)
            (if (= lastOp 0) (cons a 0) (cons (func a b) 1)
                )
            )
        )
    )
  
  (define (recursion lastOp a b)
    (define (nextOp) (doOperation lastOp (car a) (car b)))
    (if (null? b) '()
        (append (list (car (nextOp))) (recursion (cdr (nextOp)) (cdr a) (cdr b)))
        )
    )

    (append (list (car a)) (recursion 0 (cdr a) (cdr b)))
  )
;(selectiveMerge * '(1 2 3 4 1 3 1 2) '(10 1 2 0 5 -2 -1 4))



(define (preferredNetwork mobile networks)
  (define (numberCounter num l)
    (mapAndFold + (lambda(x) (if (= x num) 1 0)) l)
    )
  (define (allNumbersCounter l1 l2)
    (if (< (mapAndFold + (lambda(x) (numberCounter x l2)) l1) 2) 0 (mapAndFold + (lambda(x) (numberCounter x l2)) l1))
    )
  (define (listLength l)
    (mapAndFold + (lambda(x) 1) l)
    )
  (define (pokritie mobile network)
    (cons (/ (allNumbersCounter mobile network) (listLength network)) network)
    )
  (define (maxForPairs a b)
    (if (> (car a) (car b)) a b)
    )
  (define (findBestNetwork)
    (cdr (mapAndFold maxForPairs (lambda(x) (pokritie mobile x)) networks))
    )

  (mapAndFold append (lambda(x) (if (> (numberCounter x (findBestNetwork)) 0) (list x) '())) mobile)
  )
;(preferredNetwork '(1 3 5 7 20) '((1 3 8 40 41) (1 3 7 28) (5)))


(define (preferredNetworkForAll mobiles networks)
  (define (numberCounter num l)
    (mapAndFold + (lambda(x) (if (= x num) 1 0)) l)
    )
  (define (allNumbersCounter l1 l2)
    (if (< (mapAndFold + (lambda(x) (numberCounter x l2)) l1) 2) 0 (mapAndFold + (lambda(x) (numberCounter x l2)) l1))
    )
  (define (numberCounterInAll num)
    (mapAndFold + (lambda(x) (numberCounter num x)) mobiles)
    )
  (define (listLength l)
    (mapAndFold + (lambda(x) 1) l)
    )
  (define (pokritie mobile network)
    (/ (allNumbersCounter mobile network) (listLength network))
    )
  (define (maxForTriples a b)
    (if (> (car a) (car b)) a
        (if (= (car a) (car b)) (if (> (car (cdr a)) (car (cdr b))) a b) b

            )
        )
    )
  (define (numberOfMatches network)
    (mapAndFold + (lambda(x) (if (> (allNumbersCounter x network) 0) 1 0)) mobiles)
    )
  (define (sumOfPokritiq network)
    (mapAndFold + (lambda(x) (pokritie x network)) mobiles)
    )

  (define (findBestNetwork)
    (cdr (cdr (mapAndFold maxForTriples (lambda(x) (append (list (numberOfMatches x) (sumOfPokritiq x)) x)) networks)))
    )

  (mapAndFold append (lambda(x) (if (> (numberCounterInAll x) 0) (list x) '())) (findBestNetwork))
  )
;(preferredNetworkForAll '((1 3 5 7 20) (1 8 10 3) (5)) '((1 3 8 40 41) (1 3 7 28) (5)))

